tokenSecret = aaj23lwke5334
server.servlet.context-path=/api
server.port = 8080
#db configs:
spring.jpa.hibernate.ddl-auto = update
#spring.datasource.username = api
#spring.datasource.password = JONath23!@

#uncomment for h2:
spring.h2.console.enabled=true
spring.h2.console.path=/h2

spring.datasource.jdbc-url=jdbc:h2:file:~/dasboot;DB_CLOSE_ON_EXIT=FALSE;AUTO_SERVER=TRUE
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver

spring.datasource.max-active=10
spring.datasource.max-idle=8
spring.datasource.max-wait=10000
spring.datasource.min-evictable-idle-time-millis=1000
spring.datasource.min-idle=8
spring.datasource.time-between-eviction-runs-millis=1

spring.flyway.baseline-on-migrate=true

datasource.flyway.jdbc-url = jdbc:h2:file:~/api-user-and-address
datasource.flyway.username = sa
datasource.flyway.password =
datasource.flyway.driver-class-name = org.h2.Driver
spring.flyway.check-location = false

#for mysql:
#spring.datasource.url = jdbc:mysql://localhost:3306/photo_app

#To log the sql queries in console:
logging.level.org.hibernate.SQL = DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder = TRACE
spring.jpa.properties.hibernate.format_sql = true

#Messages:
userController.Swagger.GetUser.value= Get User 
userController.Swagger.GetUser.notes= Returns User details by id

userController.Swagger.GetUsers.value = Get all Users
userController.Swagger.GetUsers.notes = Returns all Users, takes limit and page

userController.Swagger.GetUserAddress.value = Get Address associated to User
userController.Swagger.GetUserAddress.notes = Returns a single Address of a User by Address id

userController.Swagger.GetUserAddresses.value = Get all Addresses associated to User
userController.Swagger.GetUserAddresses.notes = Returns all Addresses of a user by User id

userController.Swagger.UpdateUser.value = Update existing User
userController.Swagger.UpdateUser.notes = To update a User. Only fields allowed are first and last name

userController.Swagger.CreateUser.value = Create New User
userController.Swagger.CreateUser.notes = To create User. must provide: email, first name, last name and password. Address is optional

userController.Swagger.DeleteUser.value = Delete Existing User
userController.Swagger.DeleteUser.notes = To delete User by id

loginController.Swagger.Login.value = User login
loginController.Swagger.Login.notes = Login from here. must provide email and password. Returns token